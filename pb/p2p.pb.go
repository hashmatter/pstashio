// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/p2p.proto

package pstashio

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterPeerRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Location             string   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	CachedBlocks         []*Block `protobuf:"bytes,3,rep,name=cached_blocks,json=cachedBlocks,proto3" json:"cached_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterPeerRequest) Reset()         { *m = RegisterPeerRequest{} }
func (m *RegisterPeerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterPeerRequest) ProtoMessage()    {}
func (*RegisterPeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{0}
}

func (m *RegisterPeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterPeerRequest.Unmarshal(m, b)
}
func (m *RegisterPeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterPeerRequest.Marshal(b, m, deterministic)
}
func (m *RegisterPeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPeerRequest.Merge(m, src)
}
func (m *RegisterPeerRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterPeerRequest.Size(m)
}
func (m *RegisterPeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPeerRequest proto.InternalMessageInfo

func (m *RegisterPeerRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RegisterPeerRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *RegisterPeerRequest) GetCachedBlocks() []*Block {
	if m != nil {
		return m.CachedBlocks
	}
	return nil
}

type RegisterPeerResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterPeerResponse) Reset()         { *m = RegisterPeerResponse{} }
func (m *RegisterPeerResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterPeerResponse) ProtoMessage()    {}
func (*RegisterPeerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{1}
}

func (m *RegisterPeerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterPeerResponse.Unmarshal(m, b)
}
func (m *RegisterPeerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterPeerResponse.Marshal(b, m, deterministic)
}
func (m *RegisterPeerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPeerResponse.Merge(m, src)
}
func (m *RegisterPeerResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterPeerResponse.Size(m)
}
func (m *RegisterPeerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPeerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPeerResponse proto.InternalMessageInfo

func (m *RegisterPeerResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// the list of cached blocks is provided when requesting a new resource so that
// the tracker can decide which blocks to replicate besides the resource blocks.
type GetProvidersRequest struct {
	ResourceId           string   `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	CachedBlocks         []*Block `protobuf:"bytes,2,rep,name=cached_blocks,json=cachedBlocks,proto3" json:"cached_blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProvidersRequest) Reset()         { *m = GetProvidersRequest{} }
func (m *GetProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*GetProvidersRequest) ProtoMessage()    {}
func (*GetProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{2}
}

func (m *GetProvidersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProvidersRequest.Unmarshal(m, b)
}
func (m *GetProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProvidersRequest.Marshal(b, m, deterministic)
}
func (m *GetProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProvidersRequest.Merge(m, src)
}
func (m *GetProvidersRequest) XXX_Size() int {
	return xxx_messageInfo_GetProvidersRequest.Size(m)
}
func (m *GetProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProvidersRequest proto.InternalMessageInfo

func (m *GetProvidersRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *GetProvidersRequest) GetCachedBlocks() []*Block {
	if m != nil {
		return m.CachedBlocks
	}
	return nil
}

type GetProvidersResponse struct {
	Manifest             *ReplicationManifest `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetProvidersResponse) Reset()         { *m = GetProvidersResponse{} }
func (m *GetProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*GetProvidersResponse) ProtoMessage()    {}
func (*GetProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{3}
}

func (m *GetProvidersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProvidersResponse.Unmarshal(m, b)
}
func (m *GetProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProvidersResponse.Marshal(b, m, deterministic)
}
func (m *GetProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProvidersResponse.Merge(m, src)
}
func (m *GetProvidersResponse) XXX_Size() int {
	return xxx_messageInfo_GetProvidersResponse.Size(m)
}
func (m *GetProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProvidersResponse proto.InternalMessageInfo

func (m *GetProvidersResponse) GetManifest() *ReplicationManifest {
	if m != nil {
		return m.Manifest
	}
	return nil
}

// a resource represents data to be requested, replicated and exchanged by the
// peers in the network. a resource contains a set of all the blocks that are
// the data itself.
type Resource struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size                 int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Blocks               []*Block `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{4}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Resource) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Resource) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// a block is a "piece" of a resource. blocks in a given resource must have the
// same size (apart from the last one)
type Block struct {
	ResourceId           string   `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Size                 int32    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{5}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *Block) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Block) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// a peer block is a tuple containing information for a peer to fetch and
// validate a block from a resources stored in a given peer.
type PeerBlockRequest struct {
	ResourceId           string   `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	BlockId              string   `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Addr                 string   `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	PeerPubkey           string   `protobuf:"bytes,4,opt,name=peer_pubkey,json=peerPubkey,proto3" json:"peer_pubkey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerBlockRequest) Reset()         { *m = PeerBlockRequest{} }
func (m *PeerBlockRequest) String() string { return proto.CompactTextString(m) }
func (*PeerBlockRequest) ProtoMessage()    {}
func (*PeerBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{6}
}

func (m *PeerBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerBlockRequest.Unmarshal(m, b)
}
func (m *PeerBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerBlockRequest.Marshal(b, m, deterministic)
}
func (m *PeerBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerBlockRequest.Merge(m, src)
}
func (m *PeerBlockRequest) XXX_Size() int {
	return xxx_messageInfo_PeerBlockRequest.Size(m)
}
func (m *PeerBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerBlockRequest proto.InternalMessageInfo

func (m *PeerBlockRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *PeerBlockRequest) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *PeerBlockRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *PeerBlockRequest) GetPeerPubkey() string {
	if m != nil {
		return m.PeerPubkey
	}
	return ""
}

// a replication manifest is a list of peer block requests which must be issued
type ReplicationManifest struct {
	BlockReq             []*PeerBlockRequest `protobuf:"bytes,1,rep,name=block_req,json=blockReq,proto3" json:"block_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReplicationManifest) Reset()         { *m = ReplicationManifest{} }
func (m *ReplicationManifest) String() string { return proto.CompactTextString(m) }
func (*ReplicationManifest) ProtoMessage()    {}
func (*ReplicationManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faf6959bb89dc13d, []int{7}
}

func (m *ReplicationManifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicationManifest.Unmarshal(m, b)
}
func (m *ReplicationManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicationManifest.Marshal(b, m, deterministic)
}
func (m *ReplicationManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationManifest.Merge(m, src)
}
func (m *ReplicationManifest) XXX_Size() int {
	return xxx_messageInfo_ReplicationManifest.Size(m)
}
func (m *ReplicationManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationManifest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationManifest proto.InternalMessageInfo

func (m *ReplicationManifest) GetBlockReq() []*PeerBlockRequest {
	if m != nil {
		return m.BlockReq
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterPeerRequest)(nil), "pstashio.RegisterPeerRequest")
	proto.RegisterType((*RegisterPeerResponse)(nil), "pstashio.RegisterPeerResponse")
	proto.RegisterType((*GetProvidersRequest)(nil), "pstashio.GetProvidersRequest")
	proto.RegisterType((*GetProvidersResponse)(nil), "pstashio.GetProvidersResponse")
	proto.RegisterType((*Resource)(nil), "pstashio.Resource")
	proto.RegisterType((*Block)(nil), "pstashio.Block")
	proto.RegisterType((*PeerBlockRequest)(nil), "pstashio.PeerBlockRequest")
	proto.RegisterType((*ReplicationManifest)(nil), "pstashio.ReplicationManifest")
}

func init() { proto.RegisterFile("pb/p2p.proto", fileDescriptor_faf6959bb89dc13d) }

var fileDescriptor_faf6959bb89dc13d = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x8f, 0xd3, 0x30,
	0x10, 0xc5, 0x37, 0xe9, 0x6e, 0x49, 0xa6, 0xe5, 0x8f, 0xbc, 0x2b, 0x14, 0x2a, 0x01, 0x2b, 0x5f,
	0xd8, 0x53, 0x90, 0x02, 0x12, 0xe2, 0xca, 0x05, 0xad, 0xc4, 0x9f, 0x62, 0x0e, 0x1c, 0xa3, 0x24,
	0x1e, 0x58, 0x6b, 0x43, 0xed, 0xda, 0x0e, 0x08, 0xae, 0x7c, 0x1e, 0xbe, 0x23, 0x8a, 0xed, 0xb6,
	0x29, 0x2d, 0x6c, 0x6f, 0x99, 0xb1, 0xf3, 0x7e, 0x4f, 0x6f, 0xc6, 0x30, 0x55, 0xf5, 0x53, 0x55,
	0xa8, 0x5c, 0x69, 0x69, 0x25, 0x49, 0x94, 0xb1, 0x95, 0xb9, 0x12, 0x92, 0x7e, 0x87, 0x53, 0x86,
	0x5f, 0x84, 0xb1, 0xa8, 0xe7, 0x88, 0x9a, 0xe1, 0xb2, 0x43, 0x63, 0xc9, 0x1d, 0x88, 0x85, 0xca,
	0xa2, 0xf3, 0xe8, 0x22, 0x65, 0xb1, 0x50, 0x64, 0x06, 0x49, 0x2b, 0x9b, 0xca, 0x0a, 0xb9, 0xc8,
	0x62, 0xd7, 0x5d, 0xd7, 0xe4, 0x39, 0xdc, 0x6e, 0xaa, 0xe6, 0x0a, 0x79, 0x59, 0xb7, 0xb2, 0xb9,
	0x36, 0xd9, 0xe8, 0x7c, 0x74, 0x31, 0x29, 0xee, 0xe6, 0x2b, 0x48, 0xfe, 0xaa, 0xef, 0xb3, 0xa9,
	0xbf, 0xe5, 0x0a, 0x43, 0x73, 0x38, 0xdb, 0x06, 0x1b, 0x25, 0x17, 0x06, 0xc9, 0x7d, 0x18, 0x1b,
	0x5b, 0xd9, 0xce, 0x04, 0x7a, 0xa8, 0x68, 0x0b, 0xa7, 0xaf, 0xd1, 0xce, 0xb5, 0xfc, 0x26, 0x38,
	0x6a, 0xb3, 0x32, 0xfa, 0x18, 0x26, 0x1a, 0x8d, 0xec, 0x74, 0x83, 0xa5, 0xe0, 0xe1, 0x1f, 0x58,
	0xb5, 0x2e, 0xf9, 0xae, 0xbb, 0xf8, 0x10, 0x77, 0x1f, 0xe0, 0x6c, 0x9b, 0x16, 0xdc, 0xbd, 0x84,
	0xe4, 0x6b, 0xb5, 0x10, 0x9f, 0xd1, 0x58, 0xc7, 0x9a, 0x14, 0x0f, 0x37, 0x42, 0x0c, 0x55, 0x2b,
	0x7c, 0x28, 0x6f, 0xc3, 0x25, 0xb6, 0xbe, 0x4e, 0x3f, 0x41, 0xc2, 0x82, 0x2d, 0x17, 0x2f, 0x5f,
	0xc7, 0xcb, 0x09, 0x81, 0x63, 0x23, 0x7e, 0xa2, 0x8b, 0xf6, 0x84, 0xb9, 0x6f, 0xf2, 0x04, 0xc6,
	0xff, 0xcf, 0x33, 0x1c, 0xd3, 0x37, 0x70, 0xe2, 0x1a, 0x37, 0x67, 0xe1, 0xb1, 0x1e, 0x32, 0xc4,
	0x8e, 0x36, 0x58, 0xfa, 0x2b, 0x82, 0x7b, 0xfd, 0x40, 0x3c, 0xe3, 0xd0, 0x94, 0x1f, 0x40, 0xe2,
	0xdc, 0x94, 0x41, 0x3f, 0x65, 0xb7, 0x5c, 0x7d, 0xe9, 0x20, 0x15, 0xe7, 0xda, 0x41, 0x52, 0xe6,
	0xbe, 0x7b, 0x3d, 0x85, 0xa8, 0x4b, 0xd5, 0xd5, 0xd7, 0xf8, 0x23, 0x3b, 0xf6, 0x7a, 0x7d, 0x6b,
	0xee, 0x3a, 0xf4, 0x5d, 0xbf, 0x96, 0x3b, 0x69, 0x92, 0x17, 0x90, 0x7a, 0x8c, 0xc6, 0x65, 0x16,
	0xb9, 0x58, 0x66, 0x9b, 0x58, 0xfe, 0xb6, 0xcd, 0xbc, 0x27, 0x86, 0xcb, 0xe2, 0x77, 0x04, 0xe9,
	0xc7, 0x7e, 0xbe, 0x5d, 0x8b, 0x9a, 0xbc, 0x87, 0xe9, 0x70, 0xf7, 0xc8, 0xd6, 0x0c, 0x77, 0x1e,
	0xc3, 0xec, 0xd1, 0xbf, 0x8e, 0xfd, 0x52, 0xd0, 0xa3, 0x5e, 0x70, 0xb8, 0x2e, 0x43, 0xc1, 0x3d,
	0x4b, 0x3b, 0x14, 0xdc, 0xb7, 0x65, 0xf4, 0xa8, 0x1e, 0xbb, 0x77, 0xfa, 0xec, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0x33, 0x38, 0x13, 0xb7, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error)
	GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error) {
	out := new(RegisterPeerResponse)
	err := c.cc.Invoke(ctx, "/pstashio.Scheduler/RegisterPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error) {
	out := new(GetProvidersResponse)
	err := c.cc.Invoke(ctx, "/pstashio.Scheduler/GetProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	RegisterPeer(context.Context, *RegisterPeerRequest) (*RegisterPeerResponse, error)
	GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) RegisterPeer(ctx context.Context, req *RegisterPeerRequest) (*RegisterPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeer not implemented")
}
func (*UnimplementedSchedulerServer) GetProviders(ctx context.Context, req *GetProvidersRequest) (*GetProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_RegisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RegisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstashio.Scheduler/RegisterPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RegisterPeer(ctx, req.(*RegisterPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstashio.Scheduler/GetProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetProviders(ctx, req.(*GetProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pstashio.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPeer",
			Handler:    _Scheduler_RegisterPeer_Handler,
		},
		{
			MethodName: "GetProviders",
			Handler:    _Scheduler_GetProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/p2p.proto",
}
